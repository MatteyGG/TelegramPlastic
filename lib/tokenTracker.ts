// src/lib/tokenTracker.ts

import { mainLogger } from "../modules/logger";
import { CostTracking, TokenUsage } from "../types";

// –¢–∞—Ä–∏—Ñ—ã Yandex GPT (–∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–∞ 25.09.2025)
const PRICING = {
  'yandexgpt-lite': {
    input: 0.20 / 1000, // 0.20 —Ä—É–±–ª—è –∑–∞ 1000 —Ç–æ–∫–µ–Ω–æ–≤ –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
    output: 0.20 / 1000,
    asyncInput: 0.10 / 1000, // 0.10 —Ä—É–±–ª—è –∑–∞ 1000 —Ç–æ–∫–µ–Ω–æ–≤ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
    asyncOutput: 0.10 / 1000,
  },
  'yandexgpt-pro': {
    input: 1.20 / 1000, // –î–ª—è –≤–µ—Ä—Å–∏–π 5 –∏ –º–ª–∞–¥—à–µ
    output: 1.20 / 1000,
    asyncInput: 0.60 / 1000,
    asyncOutput: 0.60 / 1000,
  },
  'yandexgpt-pro-5.1': {
    input: 0.40 / 1000, // –° —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏ 50%
    output: 0.40 / 1000,
    asyncInput: 0.20 / 1000, // –° —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏ 50%
    asyncOutput: 0.20 / 1000,
  },
  'llama-8b': {
    input: 0.20 / 1000,
    output: 0.20 / 1000,
    asyncInput: 0.10 / 1000,
    asyncOutput: 0.10 / 1000,
  },
  'llama-70b': {
    input: 1.20 / 1000,
    output: 1.20 / 1000,
    asyncInput: 0.60 / 1000,
    asyncOutput: 0.60 / 1000,
  }
};

export class TokenTracker {
  private static instance: TokenTracker;
  private totalCost: number = 0;
  private dailyUsage: Map<string, number> = new Map();
  private userUsage: Map<string, number> = new Map();

  static getInstance(): TokenTracker {
    if (!TokenTracker.instance) {
      TokenTracker.instance = new TokenTracker();
    }
    return TokenTracker.instance;
  }

  calculateCost(
    promptTokens: number,
    completionTokens: number,
    model: string = "yandexgpt-lite"
  ): number {
    const pricing =
      PRICING[model as keyof typeof PRICING] || PRICING["yandexgpt-lite"];

    const inputCost = promptTokens * pricing.input;
    const outputCost = completionTokens * pricing.output;

    return inputCost + outputCost;
  }

  trackUsage(usage: TokenUsage): void {
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
    this.totalCost += usage.cost;

    // –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
    const today = new Date().toISOString().split("T")[0];
    const dailyTotal = this.dailyUsage.get(today) || 0;
    this.dailyUsage.set(today, dailyTotal + usage.cost);

    // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    if (usage.userId) {
      const userTotal = this.userUsage.get(usage.userId) || 0;
      this.userUsage.set(usage.userId, userTotal + usage.cost);
    }


    // –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    mainLogger.info(
      {
        userId: usage.userId,
        chatId: usage.chatId,
        model: usage.model,
        promptTokens: usage.promptTokens,
        completionTokens: usage.completionTokens,
        totalTokens: usage.totalTokens,
        cost: usage.cost.toFixed(6),
        totalCost: this.totalCost.toFixed(2),
        timestamp: usage.timestamp,
      },
      "üî¢ Token Usage" // The message is the second argument
    );
  }

  updateChatId(oldChatId: string, newChatId: string): void {
    // –û–±–Ω–æ–≤–ª—è–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const today = new Date().toISOString().split('T')[0];
    const dailyKey = `${today}_${oldChatId}`;
    const dailyValue = this.dailyUsage.get(dailyKey);
    
    if (dailyValue) {
      this.dailyUsage.delete(dailyKey);
      this.dailyUsage.set(`${today}_${newChatId}`, dailyValue);
    }
    
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–Ω–∞–ª–æ–≥–∏—á–Ω—É—é –ª–æ–≥–∏–∫—É –¥–ª—è userUsage –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
  }

  getStats(): CostTracking {
    const dailyUsageObj: { [date: string]: number } = {};
    this.dailyUsage.forEach((value, key) => {
      dailyUsageObj[key] = value;
    });

    const userUsageObj: { [userId: string]: number } = {};
    this.userUsage.forEach((value, key) => {
      userUsageObj[key] = value;
    });

    return {
      totalCost: this.totalCost,
      totalTokens: Array.from(this.userUsage.values()).reduce(
        (a, b) => a + b,
        0
      ),
      dailyUsage: dailyUsageObj,
      userUsage: userUsageObj,
    };
  }
   getModelPricing(model: string): { input: number; output: number } {
    return PRICING[model as keyof typeof PRICING] || PRICING["yandexgpt-lite"];
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏)
  resetStats(): void {
    this.totalCost = 0;
    this.dailyUsage.clear();
    this.userUsage.clear();
    mainLogger.info("üìä Token statistics reset");
  }
}

