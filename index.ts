import OpenAI from "openai";
import { Bot } from "grammy";
import dotenv from "dotenv";
import { is3DPrintingRelated } from "./modules/wordtest";

import { findFAQAnswer } from "./modules/faq";
import { getCacheResponse, setCacheResponse } from "./modules/cache";
import { initSearch, searchFAQ } from "./modules/search";
import { logRequest } from "./modules/metrics";

dotenv.config();
const memory: Record<string, ChatContext> = {}; // –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–º—è—Ç–∏
const token = process.env["GITHUB_TOKEN"];
const endpoint = "https://models.github.ai/inference";
const modelName = "openai/gpt-4.1";

const MAX_HISTORY_LENGTH = 6; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –ø–∞—Ä—ã –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç

// –¢–∏–ø –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞
type ChatContext = {
  history: Array<{ role: "user" | "assistant"; content: string }>;
  isRelevant: boolean; // –§–ª–∞–≥ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–∏–∞–ª–æ–≥–∞
};

// –°–ª–æ–≤–∞—Ä—å –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤

export const MATERIALS: Record<string, Material> = {
  ABS: {
    links: [
      "https://rec3d.ru/plastik-dlya-3d-printerov/all-plastic/?material[]=6",
    ],
  },
  PETG: {
    links: [
      "https://rec3d.ru/plastik-dlya-3d-printerov/all-plastic/?material[]=42",
    ],
  },
  PLA: {
    links: [
      "https://rec3d.ru/plastik-dlya-3d-printerov/all-plastic/?material[]=38",
    ],
  },
  TPU: {
    links: [
      "https://rec3d.ru/plastik-dlya-3d-printerov/all-plastic/?material[]=43",
    ],
  },
};

initSearch();

const client = new OpenAI({ baseURL: endpoint, apiKey: token });
const bot = new Bot(process.env["BOT_TOKEN"]!);

const SYSTEM_PROMPT = `–í—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ 3D-–ø–µ—á–∞—Ç–∏. –û—Ç–≤–µ—á–∞–π—Ç–µ, —É—á–∏—Ç—ã–≤–∞—è –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞. 
–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å —É—Ç–æ—á–Ω—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ê –æ–Ω —Ö–æ—Ä–æ—à?"), —Å–≤—è–∂–∏—Ç–µ –æ—Ç–≤–µ—Ç —Å –æ–±—Å—É–∂–¥–µ–Ω–Ω—ã–º –º–∞—Ç–µ—Ä–∏–∞–ª–æ–º. –í–∞—à–∞ –∑–∞–¥–∞—á–∞ - –ø–æ–º–æ–≥–∞—Ç—å —Å –≤—ã–±–æ—Ä–æ–º –ø–ª–∞—Å—Ç–∏–∫–∞, —É—á–∏—Ç—ã–≤–∞—è:
1. –¢–∏–ø –ø—Ä–∏–Ω—Ç–µ—Ä–∞ (FDM, SLA, SLS)
2. –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –¥–µ—Ç–∞–ª–∏ (–ø—Ä–æ—á–Ω–æ—Å—Ç—å, –≥–∏–±–∫–æ—Å—Ç—å, —Ç–µ—Ä–º–æ—Å—Ç–æ–π–∫–æ—Å—Ç—å)
3. –£—Å–ª–æ–≤–∏—è —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ (–∏–Ω—Ç–µ—Ä—å–µ—Ä, —ç–∫—Å—Ç–µ—Ä—å–µ—Ä, –º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏)
4. –ë—é–¥–∂–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
–†–µ–∫–æ–º–µ–Ω–¥—É–π—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã (PLA, ABS, PETG, TPU, –Ω–µ–π–ª–æ–Ω, –ø–æ–ª–∏–∫–∞—Ä–±–æ–Ω–∞—Ç) —Å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º.
–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–∂–∞—Ç—ã–º, –Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º, –≤ —Å—Ç–∏–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–ù–ï –ò–°–ü–û–õ–¨–ó–£–ô–¢–ï –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –°–ò–ú–í–û–õ–´ –≤ –æ—Ç–≤–µ—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä # ** * –∏ —Ç.–¥. –í–∞–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç—å emoji). –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ —Å–≤—è–∑–∞–Ω —Å 3D-–ø–µ—á–∞—Ç—å—é, –≤–µ–∂–ª–∏–≤–æ —É–∫–∞–∂–∏—Ç–µ –Ω–∞ —ç—Ç–æ.
`;

bot.command("start", (ctx) =>
  ctx.reply(
    "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –≤—ã–±—Ä–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è 3D-–ø–µ—á–∞—Ç–∏. –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã! üõ†Ô∏è\n\nhttps://github.com/MatteyGG/TelegramPlastic"
  )
);

bot.on("message", async (ctx) => {
  try {
    const userMessage = ctx.message.text?.trim() || "";
    const chatId = ctx.chat.id.toString();

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
    logRequest(userMessage, "ai");

    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞
    const cachedAnswer = getCacheResponse(userMessage);
    if (cachedAnswer) {
      await ctx.reply(cachedAnswer);
      logRequest(userMessage, "cache");
      return;
    }

    // 2. –ü–æ–∏—Å–∫ –≤ FAQ
    const faqAnswer = findFAQAnswer(userMessage) || searchFAQ(userMessage);
    if (faqAnswer) {
      await ctx.reply(faqAnswer);
      logRequest(userMessage, "faq");
      return;
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    if (!memory[chatId]) {
      memory[chatId] = {
        history: [],
        isRelevant: false,
      } as ChatContext;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –¢–û–õ–¨–ö–û –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (!memory[chatId].isRelevant) {
      const isRelevant = is3DPrintingRelated(userMessage);
      if (!isRelevant) {
        await ctx.reply("–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ 3D-–ø–µ—á–∞—Ç–∏, –∏ —è –ø–æ–º–æ–≥—É! üñ®Ô∏è");
        return;
      }
      memory[chatId].isRelevant = true; // –î–∏–∞–ª–æ–≥ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π
    }

    const instantReply = await ctx.reply("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é...");

    /// –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
    memory[chatId].history.push({ role: "user", content: userMessage });

    // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —Å –í–°–ï–ô –∏—Å—Ç–æ—Ä–∏–µ–π
    const messages = [
      {
        role: "system",
        content: SYSTEM_PROMPT,
      } as const, // –Ø–≤–Ω–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ —Ç–∏–ø–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
      ...memory[chatId].history.slice(-MAX_HISTORY_LENGTH).map((msg) => ({
        role: msg.role as "user" | "assistant", // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Ä–æ–ª–∏
        content: msg.content,
      })),
    ];

    const response = await client.chat.completions.create({
      messages: messages as any, // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Ç–∏–ø–æ–≤
      temperature: 0.4,
      model: modelName,
    });

    let answer =
      response.choices[0].message.content?.replace(/[*#]/g, "") || "";

    // –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
    if (!answer.includes("–Ω–µ —Å–≤—è–∑–∞–Ω")) {
      setCacheResponse(userMessage, answer);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é –∏ –æ–±—Ä–µ–∑–∞–µ–º
    memory[chatId].history.push({ role: "assistant", content: answer });
    if (memory[chatId].history.length > MAX_HISTORY_LENGTH * 2) {
      memory[chatId].history = memory[chatId].history.slice(
        -MAX_HISTORY_LENGTH * 2
      );
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
    const mentionedMaterial = Object.keys(MATERIALS).find((m) =>
      answer.toLowerCase().includes(m.toLowerCase())
    );

    if (mentionedMaterial) {
      answer += `\n\nüè∑Ô∏è –ì–¥–µ –∫—É–ø–∏—Ç—å ${mentionedMaterial}:\n${MATERIALS[
        mentionedMaterial
      ].links.join("\n")}`;
    }

    await ctx.api.editMessageText(ctx.chat.id, instantReply.message_id, answer);
  } catch (error) {
    await ctx.reply("‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–Ω–∞—á–µ.");
    console.error("Error:", error);
  }
});

bot.start();
console.log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!");
