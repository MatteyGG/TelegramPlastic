import { Context } from "grammy";
import { bot } from "../lib/context";
import fs from "fs/promises";
import path from "path";
import { InputFile } from "grammy";
import { loadConfig } from "../modules/getConfig";
import { mainLogger } from "../modules/logger";

const CONFIG_PATH = "./config";

async function verifyAdmin(ctx: Context): Promise<boolean> {
  return ctx.from?.id.toString() === process.env.ADMIN_ID;
}

export function register_admin() {
  mainLogger.info("Registering admin commands");

  // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–æ–≤
  bot.command("editconfig", async (ctx) => {
    if (!(await verifyAdmin(ctx))) {
      return ctx.reply("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω");
    } 

    const [_, type, key, ...valueParts] = ctx.msg.text.split(" ");
    const value = valueParts.join(" ");

    if (!type || !key || !value) {
      return ctx.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /editconfig <—Ç–∏–ø> <–∫–ª—é—á> <–∑–Ω–∞—á–µ–Ω–∏–µ>");
    }

    try {
      const configFile = path.join(CONFIG_PATH, `${type}.json`);
      const data = JSON.parse(await fs.readFile(configFile, "utf-8"));

      const keys = key.split(".");
      let target = data;
      for (let i = 0; i < keys.length - 1; i++) {
        if (!target[keys[i]]) target[keys[i]] = {};
        target = target[keys[i]];
      }
      target[keys[keys.length - 1]] = JSON.parse(value);

      await fs.writeFile(configFile, JSON.stringify(data, null, 2));
      await ctx.reply("‚úÖ –ö–æ–Ω—Ñ–∏–≥ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!");
    } catch (error: any) {
      console.error("Config edit error:", error);
      await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }
  });

  // –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω—Ñ–∏–≥–∞
  bot.command("viewconfig", async (ctx) => {
    if (!(await verifyAdmin(ctx))) return;

    const [_, type] = ctx.msg.text.split(" ");
    if (!type) return ctx.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω—Ñ–∏–≥–∞");

    try {
      const configFile = path.join(CONFIG_PATH, `${type}.json`);
      const data = await fs.readFile(configFile, "utf-8");
      await ctx.reply(`üìù ${type}.json:\n<code>${data}</code>`, {
        parse_mode: "HTML"
      });
    } catch (error) {
      await ctx.reply("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è");
    }
  });

  // –°–∫–∞—á–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥
  bot.command("getconfig", async (ctx) => {
    if (!(await verifyAdmin(ctx))) return;

    const [_, type] = ctx.msg.text.split(" ");
    if (!type) return ctx.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω—Ñ–∏–≥–∞");

    try {
      const configPath = path.resolve(CONFIG_PATH, `${type}.json`);
      await fs.access(configPath); // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
      await ctx.replyWithDocument(
        new InputFile(configPath),
        { caption: `${type}.json` }
      );
    } catch (error) {
      await ctx.reply("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }
  });

  // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞
  bot.on("message:document", async (ctx) => {
    if (!(await verifyAdmin(ctx))) return;

    const doc = ctx.message.document;
    if (!doc?.file_name?.endsWith(".json")) {
      return ctx.reply("‚ùå –ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ JSON-—Ñ–∞–π–ª—ã");
    }

    try {

      const dest = path.join(CONFIG_PATH, doc.file_name);
      const file = await ctx.getFile();
      // @ts-ignore
      const tempPath = await file.download(); // –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
      const data = await fs.readFile(tempPath); // –ß–∏—Ç–∞–µ–º JSON data
      await fs.writeFile(dest, data); // –ü–∏—à–µ–º JSON data

      await ctx.reply("‚úÖ –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!");
    } catch (error) {
      console.error("File upload error:", error);
      await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞");
    }
  });

  bot.command("reload", async (ctx) => {
    if (!(await verifyAdmin(ctx))) return;
  
    try {
      await loadConfig(true); // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞
      await ctx.reply("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–±–Ω–æ–≤–ª–µ–Ω–∞!");
    } catch (error: any) {
      await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏: ${error.message}`);
      console.error('Reload Error:', error);
    }
  });
  
}