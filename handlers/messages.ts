import OpenAI from "openai";
import dotenv from "dotenv";
import { is3DPrintingRelated } from "../modules/wordtest";

import { findFAQAnswer } from "../modules/faq";
import { getCacheResponse, setCacheResponse } from "../modules/cache";
import { initSearch, searchFAQ } from "../modules/search";
import { logRequest } from "../modules/metrics";
import { bot } from "../lib/context";

dotenv.config();
const memory: Record<string, ChatContext> = {}; // –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–º—è—Ç–∏
const token = process.env["GITHUB_TOKEN"];
const endpoint = "https://models.github.ai/inference";
const modelName = "openai/gpt-4.1";

const MAX_HISTORY_LENGTH = 6; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –ø–∞—Ä—ã –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç

// –¢–∏–ø –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞
type ChatContext = {
  history: Array<{ role: "user" | "assistant"; content: string }>;
  isRelevant: boolean; // –§–ª–∞–≥ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–∏–∞–ª–æ–≥–∞
};

// –°–ª–æ–≤–∞—Ä—å –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤

type Material = {
  links: string[];
};

export const MATERIALS: Record<string, Material> = {
  ABS: {
    links: [
      "https://rec3d.ru/plastik-dlya-3d-printerov/all-plastic/?material[]=6",
    ],
  },
  PETG: {
    links: [
      "https://rec3d.ru/plastik-dlya-3d-printerov/all-plastic/?material[]=42",
    ],
  },
  PLA: {
    links: [
      "https://rec3d.ru/plastik-dlya-3d-printerov/all-plastic/?material[]=38",
    ],
  },
  TPU: {
    links: [
      "https://rec3d.ru/plastik-dlya-3d-printerov/all-plastic/?material[]=43",
    ],
  },
};

initSearch();

const client = new OpenAI({ baseURL: endpoint, apiKey: token });

const SYSTEM_PROMPT = `–í—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ 3D-–ø–µ—á–∞—Ç–∏. –û—Ç–≤–µ—á–∞–π—Ç–µ –∫—Ä–∞—Ç–∫–æ, –∏—Å–ø–æ–ª—å–∑—É—è –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞. –í–∞—à–∞ –∑–∞–¥–∞—á–∞:
1. –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã (PLA, ABS, PETG, TPU) –Ω–∞ –æ—Å–Ω–æ–≤–µ:
   - –¢–∏–ø–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–∞ (FDM/SLA/SLS)
   - –¢—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ –¥–µ—Ç–∞–ª–∏ (–ø—Ä–æ—á–Ω–æ—Å—Ç—å, –≥–∏–±–∫–æ—Å—Ç—å, —Ç–µ—Ä–º–æ—Å—Ç–æ–π–∫–æ—Å—Ç—å)
   - –£—Å–ª–æ–≤–∏–π —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ –∏ –±—é–¥–∂–µ—Ç–∞
2. **–ó–∞–ø—Ä–µ—â–µ–Ω–æ:**
   - –£–ø–æ–º–∏–Ω–∞—Ç—å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –∏–ª–∏ —Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω—ã
   - –°–æ–∑–¥–∞–≤–∞—Ç—å –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∏ –∏–ª–∏ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
3. –í—Å–µ —Å—Å—ã–ª–∫–∏ —É–∂–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã ‚Äî –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –∏—Ö. 

–§–æ—Ä–º–∞—Ç: –ª–∞–∫–æ–Ω–∏—á–Ω—ã–π –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å emoji. –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –æ 3D-–ø–µ—á–∞—Ç–∏ ‚Äî –≤–µ–∂–ª–∏–≤–æ —Å–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–º.`;

export function register_message() {

  console.log("Registering message handler...");
  bot.on("message", async (ctx) => {
    
    if (ctx.message?.text?.startsWith("/")) {
      console.log("Command received:", ctx.message.text);
      return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
    }
    
    try {
      const userMessage = ctx.message.text?.trim() || "";
      const chatId = ctx.chat.id.toString();

      // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
      logRequest(userMessage, "ai");

      // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞
      const cachedAnswer = getCacheResponse(userMessage);
      if (cachedAnswer) {
        await ctx.reply(cachedAnswer);
        logRequest(userMessage, "cache");
        return;
      }

      // 2. –ü–æ–∏—Å–∫ –≤ FAQ
      const faqAnswer = findFAQAnswer(userMessage) || searchFAQ(userMessage);
      if (faqAnswer) {
        await ctx.reply(faqAnswer);
        logRequest(userMessage, "faq");
        return;
      }

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
      if (!memory[chatId]) {
        memory[chatId] = {
          history: [],
          isRelevant: false,
        } as ChatContext;
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –¢–û–õ–¨–ö–û –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
      if (!memory[chatId].isRelevant) {
        const isRelevant = is3DPrintingRelated(userMessage);
        if (!isRelevant) {
          await ctx.reply("–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ 3D-–ø–µ—á–∞—Ç–∏, –∏ —è –ø–æ–º–æ–≥—É! üñ®Ô∏è");
          return;
        }
        memory[chatId].isRelevant = true; // –î–∏–∞–ª–æ–≥ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π
      }

      const instantReply = await ctx.reply("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é...");

      /// –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
      memory[chatId].history.push({ role: "user", content: userMessage });

      // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —Å –í–°–ï–ô –∏—Å—Ç–æ—Ä–∏–µ–π
      const messages = [
        {
          role: "system",
          content: SYSTEM_PROMPT,
        } as const, // –Ø–≤–Ω–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ —Ç–∏–ø–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        ...memory[chatId].history.slice(-MAX_HISTORY_LENGTH).map((msg) => ({
          role: msg.role as "user" | "assistant", // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Ä–æ–ª–∏
          content: msg.content,
        })),
      ];

      const response = await client.chat.completions.create({
        messages: messages as any, // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Ç–∏–ø–æ–≤
        temperature: 0.4,
        model: modelName,
      });

      let answer =
        response.choices[0].message.content?.replace(/[*#]/g, "") || "";

      // –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
      if (!answer.includes("–Ω–µ —Å–≤—è–∑–∞–Ω")) {
        setCacheResponse(userMessage, answer);
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é –∏ –æ–±—Ä–µ–∑–∞–µ–º
      memory[chatId].history.push({ role: "assistant", content: answer });
      if (memory[chatId].history.length > MAX_HISTORY_LENGTH * 2) {
        memory[chatId].history = memory[chatId].history.slice(
          -MAX_HISTORY_LENGTH * 2
        );
      }

      // –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
      const mentionedMaterial = Object.keys(MATERIALS).find((m) =>
        answer.toLowerCase().includes(m.toLowerCase())
      );

      if (mentionedMaterial) {
        answer += `\n\nüè∑Ô∏è –ì–¥–µ –∫—É–ø–∏—Ç—å ${mentionedMaterial}:\n${MATERIALS[
          mentionedMaterial
        ].links.join("\n")}`;
      }

      await ctx.api.editMessageText(
        ctx.chat.id,
        instantReply.message_id,
        answer
      );
    } catch (error) {
      await ctx.reply("‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–Ω–∞—á–µ.");
      console.error("Error:", error);
    }
  });

}
