// src/handlers/messages.ts

import OpenAI from "openai";
import dotenv from "dotenv";
import { bot } from "../lib/context";
import { getProducts, getSystemPrompt } from "../modules/getConfig";
import { mainLogger } from "../modules/logger";
import { ChatContext, chatCache } from "../modules/cache";
import { searchProductsByAIMaterials } from "../modules/plasticInfoSearch";
import {
  completeProductClarification,
  handleProductClarification,
  selectProductsFromCandidate,
} from "../modules/productClarification";
import { Product } from "../types";
import { TokenTracker } from "../lib/tokenTracker";

dotenv.config();

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const token = process.env["YANDEX_TOKEN"];
const endpoint = process.env["YANDEX_ENDPOINT"];
const ANALYTICAL_MODEL = process.env["ANALYTICAL_MODEL"] || "gpt://b1gqrnacgsktinq6ags3/yandexgpt-lite";
const FINAL_ANSWER_MODEL = process.env["FINAL_ANSWER_MODEL"] || "gpt://b1gqrnacgsktinq6ags3/yandexgpt-lite";
const MAX_HISTORY_LENGTH = 6;

const client = new OpenAI({ apiKey: token, baseURL: endpoint });
const tokenTracker = TokenTracker.getInstance();

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function parseMaterialsFromAIResponse(aiResponse: string): string[] {
  try {
    console.log("Raw AI response for parsing:", aiResponse); // –î–õ–Ø –û–¢–õ–ê–î–ö–ò

    const match = aiResponse.match(/\[([^\]]+)\]/);
    if (match) {
      const materialsString = match[1];
      const materials = materialsString
        .split(",")
        .map((material) => material.trim().toUpperCase())
        .filter((material) => material.length > 0);

      console.log("Parsed materials:", materials); // –î–õ–Ø –û–¢–õ–ê–î–ö–ò
      return materials;
    }

    const fallback = aiResponse
      .split(",")
      .map((material) => material.trim().toUpperCase())
      .filter((material) => material.length > 0)
      .slice(0, 3);

    console.log("Fallback materials:", fallback); // –î–õ–Ø –û–¢–õ–ê–î–ö–ò
    return fallback;
  } catch (error) {
    console.error("Error parsing materials from AI response:", error);
    return [];
  }
}

function createProductDescription(products: Product[]): string {
  if (products.length === 0) return "";

  return (
    "\n=== –ö–û–ù–ö–†–ï–¢–ù–´–ï –ü–†–û–î–£–ö–¢–´ –î–õ–Ø –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò ===\n" +
    products
      .map((product, index) => {
        return `–ü–†–û–î–£–ö–¢ ${index + 1}:
–ù–∞–∑–≤–∞–Ω–∏–µ: ${product.title}
–ú–∞—Ç–µ—Ä–∏–∞–ª: ${product.material}
–û–ø–∏—Å–∞–Ω–∏–µ: ${product.description}`;
      })
      .join("\n\n")
  );
}

function createStrictProductInstructions(): string {
  return `
–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–ï –ò–ù–°–¢–†–£–ö–¶–ò–ò:
1. –í–ê–®–ê –ì–õ–ê–í–ù–ê–Ø –ó–ê–î–ê–ß–ê - –†–ï–ö–û–ú–ï–ù–î–û–í–ê–¢–¨ –ö–û–ù–ö–†–ï–¢–ù–´–ï –ü–†–û–î–£–ö–¢–´ –ò–ó –°–ü–ò–°–ö–ê –í–´–®–ï
2. –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —É–ø–æ–º–∏–Ω–∞–π—Ç–µ –≤ –æ—Ç–≤–µ—Ç–µ –ö–ê–ñ–î–´–ô –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
4. –°—Å—ã–ª–∞–π—Ç–µ—Å—å –Ω–∞ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ö–û–ù–ö–†–ï–¢–ù–´–• –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
5. –ù–ï –¥–æ–±–∞–≤–ª—è–π—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç—ã –≤ —Å–≤–æ–µ–º –æ—Ç–≤–µ—Ç–µ - –æ–Ω–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –æ—Ç–¥–µ–ª—å–Ω–æ

–°–¢–†–£–ö–¢–£–†–ê –û–¢–í–ï–¢–ê:
- –ö—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
- –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ–±–∑–æ—Ä –ö–ê–ñ–î–û–ì–û –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
- –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
- –ß–µ—Ç–∫–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è —Å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º

–ù–ï –î–û–ü–£–°–ö–ê–ï–¢–°–Ø:
- –î–∞–≤–∞—Ç—å –æ–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –±–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
- –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö –∏–∑ —Å–ø–∏—Å–∫–∞
- –î–æ–±–∞–≤–ª—è—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç—ã –≤ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞`;
}

function createProductLinksMessage(products: Product[]): string {
  if (products.length === 0) return "";

  let message = "\n\nüîó **–°—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç—ã:**";

  products.forEach((product) => {
    if (product.links.length > 0) {
      message += `\n‚Ä¢ ${product.title}: ${product.links[0]}`;
    }
  });

  return message;
}

async function getAIRecommendation(
  userMessage: string,
  systemPrompt: string
): Promise<string> {
  const messages: OpenAI.ChatCompletionMessageParam[] = [
    { role: "system", content: systemPrompt },
    {
      role: "user",
      content: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç: "${userMessage}". 
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–¥–∞—á—É –∏ –≤–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û —Å–ø–∏—Å–æ–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ç–∏–ø–æ–≤ –ø–ª–∞—Å—Ç–∏–∫–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: [MATERIAL1, MATERIAL2, MATERIAL3]
–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –¢–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö
- –ù–µ –±–æ–ª—å—à–µ 3 –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
- –ë–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π, –±–µ–∑ —Ç–µ–∫—Å—Ç–∞, —Ç–æ–ª—å–∫–æ —á–∏—Å—Ç—ã–π —Å–ø–∏—Å–æ–∫
–í—Å–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: 53

‚Ä¢ ABS+CF15: 1
‚Ä¢ PEEK+CF: 1
‚Ä¢ TPU (A80): 1
‚Ä¢ PSU: 1
‚Ä¢ PEEK+GF: 1
‚Ä¢ PP: 1
‚Ä¢ PA6+CF30: 1
‚Ä¢ rPETG+GF: 1
‚Ä¢ PET-G: 2
‚Ä¢ TPU (A95): 1
‚Ä¢ rPETG: 1
‚Ä¢ TPU (A70): 1
‚Ä¢ N/A: 10
‚Ä¢ PMMA: 1
‚Ä¢ ABS+PC: 1
‚Ä¢ PLA: 3
‚Ä¢ PA12+GF12: 1
‚Ä¢ PC: 1
‚Ä¢ HIPS: 1
‚Ä¢ ABS+GF13: 8
‚Ä¢ PA12+CF: 1
‚Ä¢ PVA: 1
‚Ä¢ ABS: 1
‚Ä¢ PA12: 1
‚Ä¢ PP+Nano Tubes: 1
‚Ä¢ PA6: 1
‚Ä¢ ASA: 1
‚Ä¢ PP+GF: 1
‚Ä¢ PEI: 1
‚Ä¢ PETG+GF10: 1
‚Ä¢ TPU+GF: 1
‚Ä¢ SEBS: 1
‚Ä¢ PEEK: 1
‚Ä¢ PVFD: 1`,
    },
  ];

  const response = await client.chat.completions.create({
    messages: messages,
    temperature: 0.1,
    model: ANALYTICAL_MODEL,
    max_tokens: 50,
  });

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
  if (response.usage) {
    const cost = tokenTracker.calculateCost(
      response.usage.prompt_tokens,
      response.usage.completion_tokens,
      ANALYTICAL_MODEL
    );
    tokenTracker.trackUsage({
      promptTokens: response.usage.prompt_tokens,
      completionTokens: response.usage.completion_tokens,
      totalTokens: response.usage.total_tokens,
      cost,
      timestamp: new Date(),
      model: ANALYTICAL_MODEL,
      chatId: "analytical_request",
    });
  }

  return response.choices[0].message.content || "";
}

// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è –∏–∑ plasticInfoSearch.ts
function findProductsByMaterials(recommendedMaterials: string[]): Product[] {
  const materialsString = recommendedMaterials.join(", ");
  const products = getProducts();
  return searchProductsByAIMaterials(materialsString, products);
}

async function getFinalAIResponse(
  userMessage: string,
  recommendedMaterials: string[],
  foundProducts: Product[],
  systemPrompt: string,
  history: any[]
): Promise<string> {
  const productDescription = createProductDescription(foundProducts);
  
  // More explicit instructions
  const enhancedInstructions = `
${systemPrompt}

–î–û–°–¢–£–ü–ù–´–ï –ü–†–û–î–£–ö–¢–´ –î–õ–Ø –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:
${productDescription}

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–ï –ü–†–ê–í–ò–õ–ê:
1. –†–ï–ö–û–ú–ï–ù–î–£–ô–¢–ï –¢–û–õ–¨–ö–û –¢–ï –ü–†–û–î–£–ö–¢–´, –ö–û–¢–û–†–´–ï –ü–ï–†–ï–ß–ò–°–õ–ï–ù–´ –í–´–®–ï
2. –ù–µ —É–ø–æ–º–∏–Ω–∞–π—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
3. –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞—Ö –ö–û–ù–ö–†–ï–¢–ù–´–• –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞
4. –û–±—ä—è—Å–Ω–∏—Ç–µ, –ø–æ—á–µ–º—É –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
5. –ù–ï –¥–æ–±–∞–≤–ª—è–π—Ç–µ —Å—Å—ã–ª–∫–∏ - –æ–Ω–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

–°–¢–†–£–ö–¢–£–†–ê –û–¢–í–ï–¢–ê:
- –ö—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
- –û–±–∑–æ—Ä 1-2 –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
- –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º
`;

  const messages: OpenAI.ChatCompletionMessageParam[] = [
    { 
      role: "system", 
      content: enhancedInstructions
    },
    ...history.slice(-MAX_HISTORY_LENGTH),
    { 
      role: "user", 
      content: `–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã: ${recommendedMaterials.join(", ")}. –ó–∞–¥–∞—á–∞: ${userMessage}` 
    },
  ];

  const response = await client.chat.completions.create({
    messages: messages,
    temperature: 0.4,
    model: FINAL_ANSWER_MODEL,
  });

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
  if (response.usage) {
    const cost = tokenTracker.calculateCost(
      response.usage.prompt_tokens,
      response.usage.completion_tokens,
      FINAL_ANSWER_MODEL
    );
    tokenTracker.trackUsage({
      promptTokens: response.usage.prompt_tokens,
      completionTokens: response.usage.completion_tokens,
      totalTokens: response.usage.total_tokens,
      cost,
      timestamp: new Date(),
      model: FINAL_ANSWER_MODEL,
      chatId: "final_request",
    });
  }

  return response.choices[0].message.content?.replace(/[*#]/g, "") || "";
}

async function processMessageWithTwoStepAI(ctx: any, userMessage: string) {
  const chatId = ctx.chat.id.toString();
  const SYSTEM_PROMPT = getSystemPrompt();

  chatCache.updateHistory(chatId, { role: "user", content: userMessage });
  const context = chatCache.getOrCreate(chatId);

  const instantReply = await ctx.reply("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∑–∞–¥–∞—á—É...");

  try {
    // –®–ê–ì 1: –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º
    const aiRecommendation = await getAIRecommendation(
      userMessage,
      SYSTEM_PROMPT
    );
    mainLogger.info("Raw AI Recommendation: " + aiRecommendation);

    const recommendedMaterials = parseMaterialsFromAIResponse(aiRecommendation);
    mainLogger.info("Parsed Materials: " + recommendedMaterials.join(", "));

    // –®–ê–ì 2: –ò—â–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –≤ –±–∞–∑–µ
    const foundProducts = findProductsByMaterials(recommendedMaterials);
    mainLogger.info("Products found: " + foundProducts.length);
    foundProducts.forEach((product) => {
      mainLogger.info(`Found product: ${product.title} - ${product.material}`);
    });

    await new Promise((resolve) => setTimeout(resolve, 100));

    // –£—Ç–æ—á–Ω–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ EDIT: –í—ã–∫–ª—é—á–µ–Ω–æ, –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–Ω–∞–µ—Ç –∫–∞–∫–æ–π –ø—Ä–æ–¥—É–∫—Ç –Ω—É–∂–µ–Ω
    // if (foundProducts.length > 1) {
    //   const clarificationSent = await handleProductClarification(
    //     ctx,
    //     userMessage,
    //     foundProducts
    //   );
    //   mainLogger.info("Clarification sent: " + clarificationSent);

    //   if (clarificationSent) {
    //     context.candidateProducts = foundProducts;
    //     context.pendingMessage = userMessage;
    //     context.aiRecommendation = recommendedMaterials.join(", ");
    //     chatCache.update(chatId, context);
    //     mainLogger.info("Context updated, waiting for user selection");
    //     return;
    //   }
    // }

    // –®–ê–ì 3: –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    const finalAnswer = await getFinalAIResponse(
      userMessage,
      recommendedMaterials,
      foundProducts,
      SYSTEM_PROMPT,
      context.history
    );

    mainLogger.info("Final Answer: " + finalAnswer);

    // –®–ê–ì 4: –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç—ã
    const productLinksMessage = createProductLinksMessage(foundProducts);
    const fullMessage = finalAnswer + productLinksMessage;

    await new Promise((resolve) => setTimeout(resolve, 50));

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    chatCache.updateHistory(chatId, {
      role: "assistant",
      content: fullMessage,
    });
    tokenTracker.updateChatId("analytical_request", chatId);
    tokenTracker.updateChatId("final_request", chatId);

    await ctx.api.editMessageText(
      ctx.chat.id,
      instantReply.message_id,
      fullMessage
    );
    await new Promise((resolve) => setTimeout(resolve, 100));
  } catch (error) {
    mainLogger.error("Error in two-step AI process:", {
      error: (error as Error).message,
    } as any);
    await ctx.api.editMessageText(
      ctx.chat.id,
      instantReply.message_id,
      "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞."
    );
  }
}

export function register_message() {
  mainLogger.info("Registering message handler with two-step AI...");

  bot.on("message:text", async (ctx) => {
    const userMessage = ctx.message.text;
    const chatId = ctx.chat.id.toString();
    const context = chatCache.getOrCreate(chatId);

    if (ctx.from?.username && !context.username) {
      context.username = ctx.from.username;
      chatCache.update(chatId, context);
    }

    await processMessageWithTwoStepAI(ctx, userMessage);
  });

  bot.on("callback_query:data", async (ctx) => {
    const data = ctx.callbackQuery.data;
    if (!data.startsWith("product:")) return;

    const productIndex = data.split(":")[1];
    const chatId = ctx.chat?.id.toString();
    if (!chatId) return;

    try {
      const chatContext = chatCache.getOrCreate(chatId);
      const {
        pendingMessage = "",
        candidateProducts = [],
        aiRecommendation = "",
      } = chatContext;

      await ctx.deleteMessage();
      completeProductClarification(chatId);

      const selectedProducts = selectProductsFromCandidate(
        candidateProducts,
        productIndex
      );

      if (productIndex === "cancel") {
        await ctx.answerCallbackQuery({ text: "–£—Ç–æ—á–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ" });
      } else if (selectedProducts.length > 0) {
        const productNames = selectedProducts
          .map((p: { title: any }) => p.title)
          .join(", ");
        await ctx.answerCallbackQuery({ text: `–í—ã–±—Ä–∞–Ω–æ: ${productNames}` });

        const SYSTEM_PROMPT = getSystemPrompt();
        const finalAnswer = await getFinalAIResponse(
          pendingMessage,
          [aiRecommendation],
          selectedProducts,
          SYSTEM_PROMPT,
          chatContext.history
        );

        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º—É –æ—Ç–≤–µ—Ç—É
        const productLinksMessage = createProductLinksMessage(selectedProducts);
        const fullMessage = finalAnswer + productLinksMessage;

        chatCache.updateHistory(chatId, {
          role: "assistant",
          content: fullMessage,
        });
        try {
          await ctx.editMessageText(fullMessage);
        } catch (editError) {
          // Fallback if message can't be edited (e.g., too old)
          await ctx.reply(fullMessage);
        }
      }
    } catch (error) {
      console.error("Callback error:", error);
      await ctx.answerCallbackQuery({ text: "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞" });
    }
  });
}
