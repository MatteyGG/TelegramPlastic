// src/handlers/admin.ts
import { Context, InlineKeyboard } from "grammy";
import { bot } from "../lib/context";
import { InputFile } from "grammy";
import { loadConfig } from "../modules/getConfig";
import { LOGGER_DIR, mainLogger } from "../modules/logger";
import { chatCache, getCacheStats } from "../modules/cache";
import { prisma } from "../modules/database";
import { getDialogHistory, getDialogHistoryByUsername } from '../modules/dialogHistory';
import path from "path";
import fs from "fs/promises";
import { verifyAdmin } from "../lib/isAdmin";

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
interface AdminState {
  currentPage: string;
  data: any;
  editingConfig?: {
    type: string;
    key: string;
    currentValue: string;
  };
}

// –ö—ç—à —Å–æ—Å—Ç–æ—è–Ω–∏–π –∞–¥–º–∏–Ω–æ–≤
const adminStates = new Map<number, AdminState>();

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞
const awaitingFile = new Map<number, boolean>();

// –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–æ–≤
const DEFAULT_RESPONSES = {
  "start": "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –≤—ã–±—Ä–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è 3D-–ø–µ—á–∞—Ç–∏. –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã! üõ†Ô∏è",
  "startAdmin": "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è!",
  "help": "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É...",
  "ratelimit": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."
};

const DEFAULT_PROMPT = {
  "system_prompt": "–í—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ 3D-–ø–µ—á–∞—Ç–∏ –Ω–∞ FDM –ø—Ä–∏–Ω—Ç–µ—Ä–∞—Ö. –û—Ç–≤–µ—á–∞–π—Ç–µ –∫—Ä–∞—Ç–∫–æ, –∏—Å–ø–æ–ª—å–∑—É—è –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞."
};

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
function getMainMenu(): InlineKeyboard {
  return new InlineKeyboard()
    .text("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "admin_stats")
    .text("üìù –ö–æ–Ω—Ñ–∏–≥–∏", "admin_configs").row()
    .text("üí¨ –î–∏–∞–ª–æ–≥–∏", "admin_dialogs")
    .text("üë• –ê–¥–º–∏–Ω—ã", "admin_manage").row()
    .text("üìÅ –õ–æ–≥–∏", "admin_logs")
    .text("‚ú® –ü—Ä–æ–¥—É–∫—Ç—ã", "admin_products").row()
    .text("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞", "admin_reload")
    .text("‚ùå –ó–∞–∫—Ä—ã—Ç—å", "admin_close");
}

// –ú–µ–Ω—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
function getConfigMenu(): InlineKeyboard {
  return new InlineKeyboard()
    .text("Responses", "config_responses_1")
    .text("Prompt", "config_prompts_1").row()
    .text("‚óÄÔ∏è –ù–∞–∑–∞–¥", "admin_main");
}

// –ú–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–æ–Ω—Ñ–∏–≥–æ–º
function getConfigItemMenu(type: string, key: string, page: number = 1): InlineKeyboard {
  return new InlineKeyboard()
    .text("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", `edit_${type}_${key}`)
    .text("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", `delete_${type}_${key}`).row()
    .text("‚óÄÔ∏è –ù–∞–∑–∞–¥", `config_${type}s_${page}`);
}

// –ú–µ–Ω—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–±—Ä–æ—Å–∞
function getResetConfirmMenu(type: string): InlineKeyboard {
  return new InlineKeyboard()
    .text("‚úÖ –î–∞", `reset_${type}_confirm`)
    .text("‚ùå –ù–µ—Ç", type === "response" ? "config_responses_1" : "config_prompts_1");
}

// –ú–µ–Ω—é –¥–∏–∞–ª–æ–≥–æ–≤
function getDialogsMenu(): InlineKeyboard {
  return new InlineKeyboard()
    .text("–ü–æ ID —á–∞—Ç–∞", "dialog_by_id")
    .text("–ü–æ username", "dialog_by_username").row()
    .text("‚óÄÔ∏è –ù–∞–∑–∞–¥", "admin_main");
}

// –ú–µ–Ω—é –ª–æ–≥–æ–≤
function getLogsMenu(): InlineKeyboard {
  return new InlineKeyboard()
    .text("–ë–æ—Ç", "log_bot")
    .text("–ó–∞–ø—Ä–æ—Å—ã", "log_requests").row()
    .text("‚óÄÔ∏è –ù–∞–∑–∞–¥", "admin_main");
}

// –ú–µ–Ω—é –ø—Ä–æ–¥—É–∫—Ç–æ–≤
function getProductsMenu(): InlineKeyboard {
  return new InlineKeyboard()
    .text("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã", "upload_products")
    .text("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤", "products_stats").row()
    .text("‚óÄÔ∏è –ù–∞–∑–∞–¥", "admin_main");
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–µ–Ω—é
async function sendMenu(ctx: Context, text: string, menu: InlineKeyboard) {
  if (ctx.callbackQuery) {
    await ctx.editMessageText(text, {
      reply_markup: menu,
      parse_mode: "HTML"
    });
  } else {
    await ctx.reply(text, {
      reply_markup: menu,
      parse_mode: "HTML"
    });
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async function sendLongMessage(ctx: Context, text: string, parseMode: "HTML" | "Markdown" = "HTML") {
  if (text.length <= 4096) {
    await ctx.reply(text, { parse_mode: parseMode });
    return;
  }

  const parts = [];
  for (let i = 0; i < text.length; i += 4096) {
    parts.push(text.substring(i, i + 4096));
  }

  for (const part of parts) {
    await ctx.reply(part, { parse_mode: parseMode });
  }
}

// –§—É–Ω–∫—Ü–∏—è —Å–±—Ä–æ—Å–∞ –∫–æ–Ω—Ñ–∏–≥–∞ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
async function resetConfigToDefault(type: string) {
  if (type === 'responses') {
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ responses
    await prisma.response.deleteMany({});

    // –°–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    for (const [key, value] of Object.entries(DEFAULT_RESPONSES)) {
      await prisma.response.upsert({
        where: { key },
        update: { value: String(value) },
        create: { key, value: String(value) }
      });
    }
  } else if (type === 'prompt') {
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ prompts
    await prisma.prompt.deleteMany({});

    // –°–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    for (const [key, value] of Object.entries(DEFAULT_PROMPT)) {
      await prisma.prompt.upsert({
        where: { key },
        update: { value: String(value) },
        create: { key, value: String(value) }
      });
    }
  }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–¥–º–∏–Ω–∞–º–∏
async function addAdmin(userId: string, username?: string) {
  return await prisma.admin.upsert({
    where: { userId },
    update: { username },
    create: { userId, username }
  });
}

async function removeAdmin(userId: string) {
  return await prisma.admin.delete({
    where: { userId }
  });
}

async function listAdmins() {
  return await prisma.admin.findMany({
    orderBy: { createdAt: 'desc' }
  });
}

// –§—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤
function validateProductsStructure(data: any): { isValid: boolean; errors?: string[] } {
  const errors: string[] = [];

  if (!data || typeof data !== 'object') {
    return { isValid: false, errors: ['Invalid JSON structure'] };
  }

  if (typeof data.timestamp !== 'string') {
    errors.push('Missing or invalid timestamp');
  }

  if (!Array.isArray(data.products)) {
    errors.push('Products must be an array');
  } else {
    data.products.forEach((product: any, index: number) => {
      if (typeof product.title !== 'string') {
        errors.push(`Product[${index}]: missing title`);
      }
      if (typeof product.material !== 'string') {
        errors.push(`Product[${index}]: missing material`);
      }
      if (!Array.isArray(product.diameters)) {
        errors.push(`Product[${index}]: diameters must be an array`);
      }
      if (!Array.isArray(product.colors)) {
        errors.push(`Product[${index}]: colors must be an array`);
      }
      if (!Array.isArray(product.links)) {
        errors.push(`Product[${index}]: links must be an array`);
      }
      if (typeof product.weight !== 'string') {
        errors.push(`Product[${index}]: missing weight`);
      }
      if (typeof product.description !== 'string') {
        errors.push(`Product[${index}]: missing description`);
      }
      if (!product.characteristics || typeof product.characteristics !== 'object') {
        errors.push(`Product[${index}]: characteristics must be an object`);
      }
    });
  }

  return errors.length === 0 ? { isValid: true } : { isValid: false, errors };
}

// –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º–∏
function getAdminsMenu(): InlineKeyboard {
  return new InlineKeyboard()
    .text("üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤", "list_admins")
    .text("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", "add_admin").row()
    .text("‚ûñ –£–±—Ä–∞—Ç—å –∞–¥–º–∏–Ω–∞", "remove_admin").row()
    .text("‚óÄÔ∏è –ù–∞–∑–∞–¥", "admin_main");
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ–Ω—Ñ–∏–≥–æ–≤ Responses
async function handleResponsesConfig(ctx: any, page: number) {
  const itemsPerPage = 5;
  const skip = (page - 1) * itemsPerPage;

  const [responses, total] = await Promise.all([
    prisma.response.findMany({
      skip,
      take: itemsPerPage,
      orderBy: { key: 'asc' }
    }),
    prisma.response.count()
  ]);

  const totalPages = Math.ceil(total / itemsPerPage);

  let responseText = `<b>Responses (—Å—Ç—Ä. ${page}/${totalPages})</b>\n\n`;
  responses.forEach((item, index) => {
    responseText += `<b>${skip + index + 1}. ${item.key}:</b>\n<code>${item.value.substring(0, 50)}${item.value.length > 50 ? '...' : ''}</code>\n\n`;
  });

  const keyboard = new InlineKeyboard();

  // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ response
  responses.forEach(item => {
    keyboard.text(`‚úèÔ∏è ${item.key}`, `config_item_response_${item.key}_${page}`);
  });

  keyboard.row();

  if (page > 1) {
    keyboard.text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", `config_responses_${page - 1}`);
  }

  if (page < totalPages) {
    keyboard.text("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", `config_responses_${page + 1}`);
  }

  keyboard.row().text("‚ûï –î–æ–±–∞–≤–∏—Ç—å response", "add_response");
  keyboard.row().text("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∫ –¥–µ—Ñ–æ–ª—Ç—É", `reset_responses`);
  keyboard.row().text("‚óÄÔ∏è –í –º–µ–Ω—é", "admin_configs");

  await sendMenu(ctx, responseText, keyboard);
  await ctx.answerCallbackQuery();
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ–Ω—Ñ–∏–≥–æ–≤ Prompt
async function handlePromptsConfig(ctx: any, page: number) {
  const itemsPerPage = 5;
  const skip = (page - 1) * itemsPerPage;

  const [prompts, total] = await Promise.all([
    prisma.prompt.findMany({
      skip,
      take: itemsPerPage,
      orderBy: { key: 'asc' }
    }),
    prisma.prompt.count()
  ]);

  const totalPages = Math.ceil(total / itemsPerPage);

  let promptText = `<b>Prompts (—Å—Ç—Ä. ${page}/${totalPages})</b>\n\n`;
  prompts.forEach((item, index) => {
    promptText += `<b>${skip + index + 1}. ${item.key}:</b>\n<code>${item.value.substring(0, 100)}${item.value.length > 100 ? '...' : ''}</code>\n\n`;
  });

  const keyboard = new InlineKeyboard();

  // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ prompt
  prompts.forEach(item => {
    keyboard.text(`‚úèÔ∏è ${item.key}`, `config_item_prompt_${item.key}_${page}`);
  });

  keyboard.row();

  if (page > 1) {
    keyboard.text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", `config_prompts_${page - 1}`);
  }

  if (page < totalPages) {
    keyboard.text("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", `config_prompts_${page + 1}`);
  }

  keyboard.row().text("‚ûï –î–æ–±–∞–≤–∏—Ç—å prompt", "add_prompt");
  keyboard.row().text("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∫ –¥–µ—Ñ–æ–ª—Ç—É", `reset_prompt`);
  keyboard.row().text("‚óÄÔ∏è –í –º–µ–Ω—é", "admin_configs");

  await sendMenu(ctx, promptText, keyboard);
  await ctx.answerCallbackQuery();
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
export function register_admin() {
  mainLogger.info("Registering admin commands");

  // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
  bot.command("admin", async (ctx) => {
    if (!(await verifyAdmin(ctx))) {
      return ctx.reply("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω");
    }

    const adminId = ctx.from!.id;
    adminStates.set(adminId, { currentPage: "main", data: null });

    await sendMenu(
      ctx,
      "üõ†Ô∏è <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
      getMainMenu()
    );
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
  // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
  bot.callbackQuery("admin_main", async (ctx) => {
    if (!(await verifyAdmin(ctx))) return;

    const adminId = ctx.from.id;
    adminStates.set(adminId, { currentPage: "main", data: null });

    await sendMenu(
      ctx,
      "üõ†Ô∏è <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
      getMainMenu()
    );
    await ctx.answerCallbackQuery();
  });

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  bot.callbackQuery("admin_stats", async (ctx) => {
    if (!(await verifyAdmin(ctx))) return;

    const stats = getCacheStats();
    const [userCount, productCount] = await Promise.all([
      prisma.dialogHistory.groupBy({ by: ['chatId'] }),
      prisma.product.count(),
    ]);

    const statsText = `
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã</b>

<b>–ö—ç—à:</b>
- –ü–æ–∏—Å–∫: ${stats.search}
- –í–æ–ø—Ä–æ—Å—ã: ${stats.general}
- –î–∏–∞–ª–æ–≥–∏: ${stats.clientDialogCache}
- –í—Å–µ–≥–æ: ${stats.total}

<b>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:</b>
- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${userCount.length}
- –ü—Ä–æ–¥—É–∫—Ç–æ–≤: ${productCount}
    `.trim();

    await sendMenu(
      ctx,
      statsText,
      new InlineKeyboard().text("‚óÄÔ∏è –ù–∞–∑–∞–¥", "admin_main")
    );
    await ctx.answerCallbackQuery();
  });

  // –ö–æ–Ω—Ñ–∏–≥–∏
  bot.callbackQuery("admin_configs", async (ctx) => {
    if (!(await verifyAdmin(ctx))) return;

    const adminId = ctx.from.id;
    adminStates.set(adminId, { currentPage: "configs", data: null });

    await sendMenu(
      ctx,
      "‚öôÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω—Ñ–∏–≥–∞:",
      getConfigMenu()
    );
    await ctx.answerCallbackQuery();
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–¥—É–∫—Ç—ã"
  bot.callbackQuery("admin_products", async (ctx) => {
    if (!(await verifyAdmin(ctx))) return;

    await sendMenu(
      ctx,
      "üîÑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
      getProductsMenu()
    );
    await ctx.answerCallbackQuery();
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã"
  bot.callbackQuery("upload_products", async (ctx) => {
    if (!(await verifyAdmin(ctx))) return;

    const adminId = ctx.from.id;
    awaitingFile.set(adminId, true);

    await ctx.editMessageText(
      'üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ JSON —Ñ–∞–π–ª —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏. –§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω –ø–∞—Ä—Å–µ—Ä–æ–º.\n\n' +
      '–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:',
      {
        reply_markup: new InlineKeyboard().text('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel_upload')
      }
    );
    await ctx.answerCallbackQuery();
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤"
  bot.callbackQuery("products_stats", async (ctx) => {
    if (!(await verifyAdmin(ctx))) return;

    const productCount = await prisma.product.count();
    const materials = await prisma.product.groupBy({
      by: ['material'],
      _count: { _all: true }
    });
    
    let statsText = `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:\n\n–í—Å–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: ${productCount}\n\n`;
    
    materials.forEach(material => {
      statsText += `‚Ä¢ ${material.material}: ${material._count._all}\n`;
    });

    await sendMenu(
      ctx,
      statsText,
      new InlineKeyboard().text("‚óÄÔ∏è –ù–∞–∑–∞–¥", "admin_products")
    );
    await ctx.answerCallbackQuery();
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –∑–∞–≥—Ä—É–∑–∫–∏
  bot.callbackQuery("cancel_upload", async (ctx) => {
    if (!(await verifyAdmin(ctx))) return;

    const adminId = ctx.from.id;
    awaitingFile.delete(adminId);

    await ctx.editMessageText("–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–∞");
    await ctx.answerCallbackQuery();
  });

  // –ü—Ä–æ—Å–º–æ—Ç—Ä responses —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
  bot.callbackQuery(/^config_responses_(\d+)$/, async (ctx) => {
    if (!(await verifyAdmin(ctx))) return;
    await handleResponsesConfig(ctx, parseInt(ctx.match[1]));
  });

  // –ü—Ä–æ—Å–º–æ—Ç—Ä prompts —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
  bot.callbackQuery(/^config_prompts_(\d+)$/, async (ctx) => {
    if (!(await verifyAdmin(ctx))) return;
    await handlePromptsConfig(ctx, parseInt(ctx.match[1]));
  });

  // –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ response
  bot.callbackQuery(/^config_item_response_(.+)_(\d+)$/, async (ctx) => {
    if (!(await verifyAdmin(ctx))) return;

    const key = ctx.match[1];
    const page = parseInt(ctx.match[2]);

    const response = await prisma.response.findUnique({
      where: { key }
    });

    if (!response) {
      await ctx.answerCallbackQuery({ text: "‚ùå Response –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      return;
    }

    const responseText = `
<b>Response:</b> ${response.key}
<code>${response.value}</code>
    `.trim();

    await sendMenu(
      ctx,
      responseText,
      getConfigItemMenu("response", response.key, page)
    );
    await ctx.answerCallbackQuery();
  });

  // –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ prompt
  bot.callbackQuery(/^config_item_prompt_(.+)_(\d+)$/, async (ctx) => {
    if (!(await verifyAdmin(ctx))) return;

    const key = ctx.match[1];
    const page = parseInt(ctx.match[2]);

    const prompt = await prisma.prompt.findUnique({
      where: { key }
    });

    if (!prompt) {
      await ctx.answerCallbackQuery({ text: "‚ùå Prompt –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      return;
    }

    const promptText = `
<b>Prompt:</b> ${prompt.key}
<code>${prompt.value}</code>
    `.trim();

    await sendMenu(
      ctx,
      promptText,
      getConfigItemMenu("prompt", prompt.key, page)
    );
    await ctx.answerCallbackQuery();
  });

  // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ response
  bot.callbackQuery(/^edit_response_(.+)$/, async (ctx) => {
    if (!(await verifyAdmin(ctx))) return;

    const key = ctx.match[1];
    const adminId = ctx.from.id;

    const response = await prisma.response.findUnique({
      where: { key }
    });

    if (!response) {
      await ctx.answerCallbackQuery({ text: "‚ùå Response –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      return;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    adminStates.set(adminId, {
      currentPage: "editing_response",
      data: null,
      editingConfig: {
        type: "response",
        key: response.key,
        currentValue: response.value
      }
    });

    await ctx.editMessageText(
      `‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ response:</b> ${response.key}\n\n–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:\n<code>${response.value}</code>\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:`,
      { parse_mode: "HTML" }
    );
    await ctx.answerCallbackQuery();
  });

  // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ prompt
  bot.callbackQuery(/^edit_prompt_(.+)$/, async (ctx) => {
    if (!(await verifyAdmin(ctx))) return;

    const key = ctx.match[1];
    const adminId = ctx.from.id;

    const prompt = await prisma.prompt.findUnique({
      where: { key }
    });

    if (!prompt) {
      await ctx.answerCallbackQuery({ text: "‚ùå Prompt –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      return;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    adminStates.set(adminId, {
      currentPage: "editing_prompt",
      data: null,
      editingConfig: {
        type: "prompt",
        key: prompt.key,
        currentValue: prompt.value
      }
    });

    await ctx.editMessageText(
      `‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ prompt:</b> ${prompt.key}\n\n–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:\n<code>${prompt.value}</code>\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:`,
      { parse_mode: "HTML" }
    );
    await ctx.answerCallbackQuery();
  });

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ response
  bot.callbackQuery("add_response", async (ctx) => {
    if (!(await verifyAdmin(ctx))) return;

    const adminId = ctx.from.id;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    adminStates.set(adminId, {
      currentPage: "adding_response",
      data: null
    });

    await ctx.editMessageText(
      "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ response</b>\n\n–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n<code>–∫–ª—é—á|–∑–Ω–∞—á–µ–Ω–∏–µ</code>\n\n–ù–∞–ø—Ä–∏–º–µ—Ä:\n<code>welcome|–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</code>",
      { parse_mode: "HTML" }
    );
    await ctx.answerCallbackQuery();
  });

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ prompt
  bot.callbackQuery("add_prompt", async (ctx) => {
    if (!(await verifyAdmin(ctx))) return;

    const adminId = ctx.from.id;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    adminStates.set(adminId, {
      currentPage: "adding_prompt",
      data: null
    });

    await ctx.editMessageText(
      "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ prompt</b>\n\n–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n<code>–∫–ª—é—á|–∑–Ω–∞—á–µ–Ω–∏–µ</code>\n\n–ù–∞–ø—Ä–∏–º–µ—Ä:\n<code>system_prompt|–í–∞—à —Ç–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞</code>",
      { parse_mode: "HTML" }
    );
    await ctx.answerCallbackQuery();
  });

  // –£–¥–∞–ª–µ–Ω–∏–µ response
  bot.callbackQuery(/^delete_response_(.+)$/, async (ctx) => {
    if (!(await verifyAdmin(ctx))) return;

    const key = ctx.match[1];

    try {
      await prisma.response.delete({
        where: { key }
      });

      await ctx.answerCallbackQuery({ text: "‚úÖ Response —É–¥–∞–ª–µ–Ω" });

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É responses
      await sendMenu(
        ctx,
        "‚öôÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω—Ñ–∏–≥–∞:",
        getConfigMenu()
      );
    } catch (error) {
      await ctx.answerCallbackQuery({ text: "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏" });
    }
  });

  // –£–¥–∞–ª–µ–Ω–∏–µ prompt
  bot.callbackQuery(/^delete_prompt_(.+)$/, async (ctx) => {
    if (!(await verifyAdmin(ctx))) return;

    const key = ctx.match[1];

    try {
      await prisma.prompt.delete({
        where: { key }
      });

      await ctx.answerCallbackQuery({ text: "‚úÖ Prompt —É–¥–∞–ª–µ–Ω" });

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É prompts
      await sendMenu(
        ctx,
        "‚öôÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω—Ñ–∏–≥–∞:",
        getConfigMenu()
      );
    } catch (error) {
      await ctx.answerCallbackQuery({ text: "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏" });
    }
  });

  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞ responses
  bot.callbackQuery("reset_responses", async (ctx) => {
    if (!(await verifyAdmin(ctx))) return;

    await sendMenu(
      ctx,
      "üîÑ <b>–°–±—Ä–æ—Å responses</b>\n\n–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ responses –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é?",
      getResetConfirmMenu("response")
    );
    await ctx.answerCallbackQuery();
  });

  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞ prompt
  bot.callbackQuery("reset_prompt", async (ctx) => {
    if (!(await verifyAdmin(ctx))) return;

    await sendMenu(
      ctx,
      "üîÑ <b>–°–±—Ä–æ—Å prompt</b>\n\n–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ prompts –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é?",
      getResetConfirmMenu("prompt")
    );
    await ctx.answerCallbackQuery();
  });

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞ responses
  bot.callbackQuery("reset_responses_confirm", async (ctx) => {
    if (!(await verifyAdmin(ctx))) return;

    try {
      await resetConfigToDefault("responses");
      await ctx.answerCallbackQuery({ text: "‚úÖ Responses —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é" });

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É responses
      await handleResponsesConfig(ctx, 1);
    } catch (error) {
      await ctx.answerCallbackQuery({ text: "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ responses" });
    }
  });

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞ prompt
  bot.callbackQuery("reset_prompt_confirm", async (ctx) => {
    if (!(await verifyAdmin(ctx))) return;

    try {
      await resetConfigToDefault("prompt");
      await ctx.answerCallbackQuery({ text: "‚úÖ Prompts —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é" });

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É prompts
      await handlePromptsConfig(ctx, 1);
    } catch (error) {
      await ctx.answerCallbackQuery({ text: "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ prompts" });
    }
  });

  // –î–∏–∞–ª–æ–≥–∏
  bot.callbackQuery("admin_dialogs", async (ctx) => {
    if (!(await verifyAdmin(ctx))) return;

    const adminId = ctx.from.id;
    adminStates.set(adminId, { currentPage: "dialogs", data: null });

    await sendMenu(
      ctx,
      "üí¨ <b>–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∏–∞–ª–æ–≥–æ–≤</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞:",
      getDialogsMenu()
    );
    await ctx.answerCallbackQuery();
  });

  // –ó–∞–ø—Ä–æ—Å ID —á–∞—Ç–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏
  bot.callbackQuery("dialog_by_id", async (ctx) => {
    if (!(await verifyAdmin(ctx))) return;

    await ctx.editMessageText("–í–≤–µ–¥–∏—Ç–µ ID —á–∞—Ç–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏:");
    await ctx.answerCallbackQuery();

    // –û–∂–∏–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–≤–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const adminId = ctx.from.id;
    adminStates.set(adminId, {
      currentPage: "awaiting_chat_id",
      data: null
    });
  });

  // –ó–∞–ø—Ä–æ—Å username –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏
  bot.callbackQuery("dialog_by_username", async (ctx) => {
    if (!(await verifyAdmin(ctx))) return;

    await ctx.editMessageText("–í–≤–µ–¥–∏—Ç–µ username –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ (–±–µ–∑ @):");
    await ctx.answerCallbackQuery();

    // –û–∂–∏–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–≤–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const adminId = ctx.from.id;
    adminStates.set(adminId, {
      currentPage: "awaiting_username",
      data: null
    });
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ –∞–¥–º–∏–Ω–æ–≤
  bot.callbackQuery("admin_manage", async (ctx) => {
    if (!(await verifyAdmin(ctx))) return;

    const adminId = ctx.from.id;
    adminStates.set(adminId, { currentPage: "manage_admins", data: null });

    await sendMenu(
      ctx,
      "üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
      getAdminsMenu()
    );
    await ctx.answerCallbackQuery();
  });

  // –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–æ–≤
  bot.callbackQuery("list_admins", async (ctx) => {
    if (!(await verifyAdmin(ctx))) return;

    const admins = await listAdmins();
    let adminsText = "<b>üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:</b>\n\n";

    admins.forEach((admin, index) => {
      adminsText += `${index + 1}. ID: ${admin.userId}`;
      if (admin.username) {
        adminsText += ` (@${admin.username})`;
      }
      adminsText += `\n   –î–æ–±–∞–≤–ª–µ–Ω: ${admin.createdAt.toLocaleDateString('ru-RU')}\n\n`;
    });

    await sendMenu(
      ctx,
      adminsText,
      new InlineKeyboard().text("‚óÄÔ∏è –ù–∞–∑–∞–¥", "admin_manage")
    );
    await ctx.answerCallbackQuery();
  });

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
  bot.callbackQuery("add_admin", async (ctx) => {
    if (!(await verifyAdmin(ctx))) return;

    await ctx.editMessageText("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω—ã (–º–æ–∂–Ω–æ —Å @username):");
    await ctx.answerCallbackQuery();

    const adminId = ctx.from.id;
    adminStates.set(adminId, {
      currentPage: "adding_admin",
      data: null
    });
  });

  // –£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
  bot.callbackQuery("remove_admin", async (ctx) => {
    if (!(await verifyAdmin(ctx))) return;

    await ctx.editMessageText("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∞–¥–º–∏–Ω–æ–≤ (–º–æ–∂–Ω–æ —Å @username):");
    await ctx.answerCallbackQuery();

    const adminId = ctx.from.id;
    adminStates.set(adminId, {
      currentPage: "removing_admin",
      data: null
    });
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ chatId –∏–ª–∏ username
  bot.on("message:text", async (ctx, next) => {
    if (!(await verifyAdmin(ctx))) {
      return next(); // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –Ω–µ –∞–¥–º–∏–Ω
    }

    const adminId = ctx.from.id;
    const state = adminStates.get(adminId);

    // –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–∞–ª—å—à–µ
    if (!state) {
      return next();
    }

    const text = ctx.message.text;

    if (state.currentPage === "awaiting_chat_id") {
      try {
        const history = await getDialogHistory(text, 10);

        if (history.length === 0) {
          await ctx.reply("üìù –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–æ–≤ –ø—É—Å—Ç–∞");
          await sendMenu(ctx, "üí¨ <b>–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∏–∞–ª–æ–≥–æ–≤</b>", getDialogsMenu());
          return;
        }

        let historyText = `üìù <b>–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è ${text}:</b>\n\n`;

        history.reverse().forEach((record, index) => {
          const date = new Date(record.timestamp).toLocaleString('ru-RU');
          const userInfo = record.username ? `(@${record.username})` : '';
          historyText += `<b>${index + 1}. [${date}] ${record.role}${userInfo}:</b>\n${record.message}\n`;

          if (record.products) {
            try {
              const products = JSON.parse(record.products);
              if (products.length > 0) {
                historyText += `   <b>üì¶ –ü—Ä–æ–¥—É–∫—Ç—ã:</b> ${products.map((p: any) => p.title).join(', ')}\n`;
              }
            } catch (e) {
              // Ignore parsing errors
            }
          }

          historyText += '\n';
        });

        await sendLongMessage(ctx, historyText, "HTML");
        await sendMenu(ctx, "üí¨ <b>–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∏–∞–ª–æ–≥–æ–≤</b>", getDialogsMenu());

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        adminStates.set(adminId, { currentPage: "dialogs", data: null });

      } catch (error) {
        console.error('History error:', error);
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏');
      }
    }
    else if (state.currentPage === "awaiting_username") {
      try {
        const history = await getDialogHistoryByUsername(text, 10);

        if (history.length === 0) {
          await ctx.reply(`üìù –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è @${text} –ø—É—Å—Ç–∞`);
          await sendMenu(ctx, "üí¨ <b>–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∏–∞–ª–æ–≥–æ–≤</b>", getDialogsMenu());
          return;
        }

        let historyText = `üìù <b>–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è @${text}:</b>\n\n`;

        history.reverse().forEach((record, index) => {
          const date = new Date(record.timestamp).toLocaleString('ru-RU');
          historyText += `<b>${index + 1}. [${date}] ${record.role}:</b>\n${record.message}\n`;

          if (record.products) {
            try {
              const products = JSON.parse(record.products);
              if (products.length > 0) {
                historyText += `   <b>üì¶ –ü—Ä–æ–¥—É–∫—Ç—ã:</b> ${products.map((p: any) => p.title).join(', ')}\n`;
              }
            } catch (e) {
              // Ignore parsing errors
            }
          }

          historyText += '\n';
        });

        await sendLongMessage(ctx, historyText, "HTML");
        await sendMenu(ctx, "üí¨ <b>–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∏–∞–ª–æ–≥–æ–≤</b>", getDialogsMenu());

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        adminStates.set(adminId, { currentPage: "dialogs", data: null });

      } catch (error) {
        console.error('History by user error:', error);
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ username');
      }
    }
    else if (state.currentPage === "editing_response") {
      try {
        const { key } = state.editingConfig!;

        await prisma.response.upsert({
          where: { key },
          update: { value: text },
          create: { key, value: text }
        });

        await ctx.reply("‚úÖ Response —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!");

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é –∫–æ–Ω—Ñ–∏–≥–æ–≤
        adminStates.set(adminId, { currentPage: "configs", data: null });
        await sendMenu(ctx, "‚öôÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π</b>", getConfigMenu());

      } catch (error) {
        console.error('Edit response error:', error);
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ response');
      }
    }
    else if (state.currentPage === "editing_prompt") {
      try {
        const { key } = state.editingConfig!;

        await prisma.prompt.upsert({
          where: { key },
          update: { value: text },
          create: { key, value: text }
        });

        await ctx.reply("‚úÖ Prompt —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!");

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é –∫–æ–Ω—Ñ–∏–≥–æ–≤
        adminStates.set(adminId, { currentPage: "configs", data: null });
        await sendMenu(ctx, "‚öôÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π</b>", getConfigMenu());

      } catch (error) {
        console.error('Edit prompt error:', error);
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ prompt');
      }
    }
    else if (state.currentPage === "adding_response") {
      try {
        const [key, ...valueParts] = text.split("|");
        const value = valueParts.join("|").trim();

        if (!key || !value) {
          await ctx.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –∫–ª—é—á|–∑–Ω–∞—á–µ–Ω–∏–µ");
          return;
        }

        await prisma.response.upsert({
          where: { key },
          update: { value },
          create: { key, value }
        });

        await ctx.reply("‚úÖ Response —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!");

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é –∫–æ–Ω—Ñ–∏–≥–æ–≤
        adminStates.set(adminId, { currentPage: "configs", data: null });
        await sendMenu(ctx, "‚öôÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π</b>", getConfigMenu());

      } catch (error) {
        console.error('Add response error:', error);
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ response');
      }
    }
    else if (state.currentPage === "adding_prompt") {
      try {
        const [key, ...valueParts] = text.split("|");
        const value = valueParts.join("|").trim();

        if (!key || !value) {
          await ctx.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –∫–ª—é—á|–∑–Ω–∞—á–µ–Ω–∏–µ");
          return;
        }

        await prisma.prompt.upsert({
          where: { key },
          update: { value },
          create: { key, value }
        });

        await ctx.reply("‚úÖ Prompt —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!");

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é –∫–æ–Ω—Ñ–∏–≥–æ–≤
        adminStates.set(adminId, { currentPage: "configs", data: null });
        await sendMenu(ctx, "‚öôÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π</b>", getConfigMenu());

      } catch (error) {
        console.error('Add prompt error:', error);
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ prompt');
      }
    }
    else if (state.currentPage === "adding_admin") {
      try {
        let userId = text.trim();
        let username: string | undefined;

        // –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω username —Å @
        if (userId.startsWith('@')) {
          username = userId.slice(1);
          // –ù—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å user_id –ø–æ username - —ç—Ç–æ —Å–ª–æ–∂–Ω–æ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
          await ctx.reply("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ User ID, –∞ –Ω–µ username. Username –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å—Å—è.");
          return;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∞
        await addAdmin(userId, username);
        await ctx.reply("‚úÖ –ê–¥–º–∏–Ω —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!");

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º–∏
        adminStates.set(adminId, { currentPage: "manage_admins", data: null });
        await sendMenu(ctx, "üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏</b>", getAdminsMenu());

      } catch (error: any) {
        if (error.code === 'P2002') {
          await ctx.reply("‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º");
        } else {
          await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞");
          console.error('Add admin error:', error);
        }
      }
    }
    else if (state.currentPage === "remove_admin") {
      try {
        const userId = text.trim();

        // –£–¥–∞–ª—è–µ–º –∞–¥–º–∏–Ω–∞
        await prisma.admin.delete({ where: { userId } });
        await ctx.reply("‚úÖ –ê–¥–º–∏–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!");

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º–∏
        adminStates.set(adminId, { currentPage: "manage_admins", data: null });
        await sendMenu(ctx, "üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏</b>", getAdminsMenu());

      } catch (error) {
        await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞");
        console.error('Remove admin error:', error);
      }
    }
    else {
      // –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ, –æ—á–∏—â–∞–µ–º –µ–≥–æ –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      adminStates.delete(adminId);
      return next();
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤)
  bot.on("message:document", async (ctx) => {
    if (!(await verifyAdmin(ctx))) return;
    
    const adminId = ctx.from.id;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã —Ñ–∞–π–ª –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (!awaitingFile.get(adminId)) {
      return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –æ–∂–∏–¥–∞–ª–∏—Å—å
    }
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
    awaitingFile.delete(adminId);
    
    try {
      const document = ctx.message.document;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ JSON —Ñ–∞–π–ª
      if (!document.file_name?.endsWith('.json')) {
        await ctx.reply('‚ùå –§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON');
        return;
      }
      
      if ((document.file_size ?? 0) > 5 * 1024 * 1024) { // 5MB –ª–∏–º–∏—Ç
        await ctx.reply('‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 5MB');
        return;
      }
      
      // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
      const file = await ctx.getFile();
      const fileUrl = `https://api.telegram.org/file/bot${process.env.BOT_TOKEN}/${file.file_path}`;
      const response = await fetch(fileUrl);
      const jsonData = await response.json();
      
      // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
      const validationResult = validateProductsStructure(jsonData);
      
      if (!validationResult.isValid) {
        await ctx.reply(
          `‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ JSON —Ñ–∞–π–ª–∞:\n${validationResult.errors?.slice(0, 5).join('\n')}${validationResult.errors && validationResult.errors.length > 5 ? '\n...–∏ –µ—â–µ ' + (validationResult.errors.length - 5) + ' –æ—à–∏–±–æ–∫' : ''}`
        );
        return;
      }
      
      // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
      const backupProducts = await prisma.product.findMany();
      const backupData = {
        timestamp: new Date().toISOString(),
        version: '1.0.0',
        products: backupProducts.map(p => ({
          title: p.title,
          material: p.material,
          diameters: JSON.parse(p.diameters),
          colors: JSON.parse(p.colors),
          links: JSON.parse(p.links),
          weight: p.weight,
          description: p.description,
          characteristics: JSON.parse(p.characteristics || '[]')
        }))
      };
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –∞–¥–º–∏–Ω—É
      await ctx.replyWithDocument(
        new InputFile(Buffer.from(JSON.stringify(backupData, null, 2)), 'products_backup.json'),
        { caption: '–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Ç–µ–∫—É—â–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤' }
      );
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      await prisma.$transaction(async (tx) => {
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
        await tx.product.deleteMany({});
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
        for (const product of jsonData.products) {
          await tx.product.create({
            data: {
              title: product.title,
              material: product.material,
              diameters: JSON.stringify(product.diameters),
              colors: JSON.stringify(product.colors),
              links: JSON.stringify(product.links),
              weight: product.weight,
              description: product.description,
              characteristics: JSON.stringify(product.characteristics)
            }
          });
        }
      });
      
      await ctx.reply(
        `‚úÖ –ü—Ä–æ–¥—É–∫—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!\n` +
        `–ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${jsonData.products.length} –ø—Ä–æ–¥—É–∫—Ç–æ–≤\n` +
        `–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤—ã—à–µ`
      );
      
    } catch (error) {
      console.error('Error processing products file:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞');
    }
  });

  // –õ–æ–≥–∏
  bot.callbackQuery("admin_logs", async (ctx) => {
    if (!(await verifyAdmin(ctx))) return;

    const adminId = ctx.from.id;
    adminStates.set(adminId, { currentPage: "logs", data: null });

    await sendMenu(
      ctx,
      "üìÅ <b>–õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ª–æ–≥–æ–≤:",
      getLogsMenu()
    );
    await ctx.answerCallbackQuery();
  });

  // –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –±–æ—Ç–∞
  bot.callbackQuery("log_bot", async (ctx) => {
    if (!(await verifyAdmin(ctx))) return;

    try {
      const logPath = path.resolve(LOGGER_DIR, "bot.log");
      await fs.access(logPath);
      await ctx.replyWithDocument(new InputFile(logPath), {
        caption: "bot.log"
      });
    } catch (error) {
      await ctx.reply("‚ùå –§–∞–π–ª –ª–æ–≥–æ–≤ –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }

    await sendMenu(ctx, "üìÅ <b>–õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã</b>", getLogsMenu());
    await ctx.answerCallbackQuery();
  });

  // –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤
  bot.callbackQuery("log_requests", async (ctx) => {
    if (!(await verifyAdmin(ctx))) return;

    try {
      const logPath = path.resolve(LOGGER_DIR, "requests.log");
      await fs.access(logPath);
      await ctx.replyWithDocument(new InputFile(logPath), {
        caption: "requests.log"
      });
    } catch (error) {
      await ctx.reply("‚ùå –§–∞–π–ª –ª–æ–≥–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }

    await sendMenu(ctx, "üìÅ <b>–õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã</b>", getLogsMenu());
    await ctx.answerCallbackQuery();
  });

  // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  bot.callbackQuery("admin_reload", async (ctx) => {
    if (!(await verifyAdmin(ctx))) return;

    try {
      await loadConfig(true);
      await ctx.answerCallbackQuery({ text: "‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!" });
    } catch (error: any) {
      await ctx.answerCallbackQuery({ text: `‚ùå –û—à–∏–±–∫–∞: ${error.message}` });
    }
  });

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
  bot.callbackQuery("admin_close", async (ctx) => {
    if (!(await verifyAdmin(ctx))) return;

    await ctx.deleteMessage();
    await ctx.answerCallbackQuery({ text: "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∑–∞–∫—Ä—ã—Ç–∞" });

    const adminId = ctx.from.id;
    adminStates.delete(adminId);
  });

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞
  bot.command("savehistory", async (ctx) => {
    if (!(await verifyAdmin(ctx))) return;

    const [_, chatId] = ctx.msg.text.split(" ");
    if (!chatId) return ctx.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ ID —á–∞—Ç–∞");

    try {
      await chatCache.forceSave(chatId);
      await ctx.reply("‚úÖ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î");
    } catch (error) {
      console.error('Save history error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏');
    }
  });
}