// src/handlers/admin.ts
import { Context } from "grammy";
import { bot } from "../lib/context";
import { InputFile } from "grammy";
import { loadConfig } from "../modules/getConfig";
import { LOGGER_DIR, mainLogger } from "../modules/logger";
import { chatCache, getCacheStats } from "../modules/cache";
import { prisma } from "../modules/database";
import { getDialogHistory, getDialogHistoryByUsername } from '../modules/dialogHistory';

import path from "path";
import fs from "fs/promises";

async function verifyAdmin(ctx: Context): Promise<boolean> {
  return ctx.from?.id.toString() === process.env.ADMIN_ID;
}

export function register_admin() {
  mainLogger.info("Registering admin commands");

  // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–æ–≤ –≤ –ë–î
  bot.command("editconfig", async (ctx) => {
    if (!(await verifyAdmin(ctx))) {
      return ctx.reply("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω");
    }

    const [_, type, key, ...valueParts] = ctx.msg.text.split(" ");
    const value = valueParts.join(" ");

    if (!type || !key || !value) {
      return ctx.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /editconfig <—Ç–∏–ø> <–∫–ª—é—á> <–∑–Ω–∞—á–µ–Ω–∏–µ>");
    }

    try {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ñ–∏–≥–æ–≤
      if (type === "response") {
        await prisma.response.upsert({
          where: { key },
          update: { value },
          create: { key, value }
        });
        await ctx.reply("‚úÖ Response —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ë–î!");
      }
      else if (type === "prompt") {
        await prisma.prompt.upsert({
          where: { key },
          update: { value },
          create: { key, value }
        });
        await ctx.reply("‚úÖ Prompt —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ë–î!");
      }
      else {
        return ctx.reply("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∫–æ–Ω—Ñ–∏–≥–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ: response, prompt");
      }
    } catch (error: any) {
      console.error("Config edit error:", error);
      await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }
  });

  // –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω—Ñ–∏–≥–∞ –∏–∑ –ë–î
  bot.command("viewconfig", async (ctx) => {
    if (!(await verifyAdmin(ctx))) return;

    const [_, type] = ctx.msg.text.split(" ");
    if (!type) return ctx.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω—Ñ–∏–≥–∞ (responses, prompt, products)");

    try {
      let data = "";

      if (type === "responses") {
        const responses = await prisma.response.findMany();
        data = JSON.stringify(responses, null, 2);
      }
      else if (type === "prompt") {
        const prompt = await prisma.prompt.findFirst();
        data = JSON.stringify(prompt, null, 2);
      }
      else if (type === "products") {
        const products = await prisma.product.findMany({ take: 5 }); // –û–≥—Ä–∞–Ω–∏—á–∏–º –≤—ã–≤–æ–¥
        data = JSON.stringify(products, null, 2);
      }
      else {
        return ctx.reply("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∫–æ–Ω—Ñ–∏–≥–∞");
      }

      await ctx.reply(`üìù ${type} –∏–∑ –ë–î:\n<code>${data}</code>`, {
        parse_mode: "HTML"
      });
    } catch (error) {
      await ctx.reply("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑ –ë–î");
    }
  });

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
  bot.command("getlog", async (ctx) => {
    if (!(await verifyAdmin(ctx))) return;

    const [_, type] = ctx.msg.text.split(" ");
    if (!type) return ctx.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø –ª–æ–≥–æ–≤ (requests/bot)");

    try {
      const logPath = path.resolve(LOGGER_DIR, `${type}.log`);
      await fs.access(logPath); // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
      await ctx.replyWithDocument(
        new InputFile(logPath),
        { caption: `${type}.log` }
      );
    } catch (error) {
      await ctx.reply("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }
  });

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞ (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
  bot.command("getcache", async (ctx) => {
    if (!(await verifyAdmin(ctx))) return;

    const stats = getCacheStats();
    const formattedStats = `
      üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏:
      - FAQ: ${stats.faq}
      - –ü–æ–∏—Å–∫: ${stats.search}
      - –í–æ–ø—Ä–æ—Å—ã: ${stats.general}
      - –î–∏–∞–ª–æ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.clientDialogCache}
      - –í—Å–µ–≥–æ: ${stats.total}
    `;
    ctx.reply(formattedStats);
  });

  bot.command("gethistorybyuser", async (ctx) => {
  if (!(await verifyAdmin(ctx))) return;

  const [_, username, limit = "10"] = ctx.msg.text.split(" ");
  if (!username) return ctx.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");

  try {
    const history = await getDialogHistoryByUsername(username, parseInt(limit));

    if (history.length === 0) {
      return ctx.reply(`üìù –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è @${username} –ø—É—Å—Ç–∞`);
    }

    let historyText = `üìù –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è @${username}:\n\n`;
    
    history.reverse().forEach((record, index) => {
      const date = new Date(record.timestamp).toLocaleString('ru-RU');
      historyText += `${index + 1}. [${date}] ${record.role}: ${record.message}\n`;
      
      if (record.products) {
        try {
          const products = JSON.parse(record.products);
          if (products.length > 0) {
            historyText += `   üì¶ –ü—Ä–æ–¥—É–∫—Ç—ã: ${products.map((p: any) => p.title).join(', ')}\n`;
          }
        } catch (e) {
          // Ignore parsing errors
        }
      }
      
      historyText += '\n';
    });

    // –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
    if (historyText.length > 4000) {
      const parts = [];
      for (let i = 0; i < historyText.length; i += 4000) {
        parts.push(historyText.substring(i, i + 4000));
      }
      for (const part of parts) {
        await ctx.reply(part);
      }
    } else {
      await ctx.reply(historyText);
    }
  } catch (error) {
    console.error('History by user error:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ username');
  }
});

// –û–±–Ω–æ–≤–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É gethistory –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è username
bot.command("gethistory", async (ctx) => {
  if (!(await verifyAdmin(ctx))) return;

  const [_, chatId, limit = "10"] = ctx.msg.text.split(" ");
  if (!chatId) return ctx.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ ID —á–∞—Ç–∞");

  try {
    const history = await getDialogHistory(chatId, parseInt(limit));

    if (history.length === 0) {
      return ctx.reply("üìù –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–æ–≤ –ø—É—Å—Ç–∞");
    }

    let historyText = `üìù –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è ${chatId}:\n\n`;

    history.reverse().forEach((record, index) => {
      const date = new Date(record.timestamp).toLocaleString('ru-RU');
      // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ username, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
      const userInfo = record.username ? `(@${record.username})` : '';
      historyText += `${index + 1}. [${date}] ${record.role}${userInfo}: ${record.message}\n`;

      if (record.products) {
        try {
          const products = JSON.parse(record.products);
          if (products.length > 0) {
            historyText += `   üì¶ –ü—Ä–æ–¥—É–∫—Ç—ã: ${products.map((p: any) => p.title).join(', ')}\n`;
          }
        } catch (e) {
          // Ignore parsing errors
        }
      }

      historyText += '\n';
    });

    // –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
    if (historyText.length > 4000) {
      const parts = [];
      for (let i = 0; i < historyText.length; i += 4000) {
        parts.push(historyText.substring(i, i + 4000));
      }
      for (const part of parts) {
        await ctx.reply(part);
      }
    } else {
      await ctx.reply(historyText);
    }
  } catch (error) {
    console.error('History error:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏');
  }
});

  // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
bot.command("savehistory", async (ctx) => {
  if (!(await verifyAdmin(ctx))) return;

  const [_, chatId] = ctx.msg.text.split(" ");
  if (!chatId) return ctx.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ ID —á–∞—Ç–∞");

  try {
    await chatCache.forceSave(chatId);
    await ctx.reply("‚úÖ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î");
  } catch (error) {
    console.error('Save history error:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏');
  }
});


  // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –ë–î
  bot.command("reload", async (ctx) => {
    if (!(await verifyAdmin(ctx))) return;

    try {
      await loadConfig(true); // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ –ë–î
      await ctx.reply("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ –ë–î!");
    } catch (error: any) {
      await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏: ${error.message}`);
      console.error('Reload Error:', error);
    }
  });
}